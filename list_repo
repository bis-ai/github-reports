/********************* GITHUB PRODUCTIVITY REPORTING FOR NARVAR-ENG ***************************

Reporting Period: 2025-05-12 07:29 (UTC) to 2025-06-11 07:29 (UTC)

Author               Commits    Last Commit         Lines Added      Lines Deleted  Avg Commit Size  Active Days   PR/Commit  Time/Commit  Code Churn
------------------------------------------------------------------------------------------------------------------------------------------------------
ishasingh0172        0          No commits           0               0               0               0            0               0               0         
debarko              0          No commits           0               0               0               0            0               0               0         
dipankarbanik        0          No commits           0               0               0               0            0               0               0         
phuongle1902         0          No commits           0               0               0               0            0               0               0         
bis-ai               0          No commits           0               0               0               0            0               0               0         
------------------------------------------------------------------------------------------------------------------------------------------------------

DEFINITIONS:
Commits: Total number of commits made by the developer.
Last Commit: Date of the most recent commit by the developer.
Avg Commit Size: Average lines of code added per commit.
Active Days: Number of days the developer committed code.
PR/Commit Ratio: Ratio of pull requests raised per commit.
Time/Commit: Average time in days between commits.
**************************End of Github Productivity Reporting******************************/


import requests

def get_github_repos(username, token):
    """
    Fetches both public and private repositories for a given GitHub username.
    Requires a Personal Access Token (PAT) for authentication.
    """
    url = "https://api.github.com/user/repos?per_page=100&type=all"
    headers = {'Authorization': f'token {token}'}
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        repos = response.json()
        repo_list = [{'name': repo['name'], 'visibility': 'Private' if repo['private'] else 'Public'} for repo in repos if repo['owner']['login'] == username]
        return repo_list
    else:
        print(f"Failed to fetch repositories for {username}: {response.status_code} - {response.json().get('message', '')}")
        return []

if __name__ == "__main__":
    github_username = input("Enter GitHub username: ")
    github_token = input("Enter your GitHub Personal Access Token: ")
    
    repositories = get_github_repos(github_username, github_token)
    
    if repositories:
        print(f"\nRepositories for {github_username}:")
        print("Repository Name               Visibility")
        print("-" * 50)
        for repo in repositories:
            print(f"{repo['name']:<30} {repo['visibility']:<10}")
    else:
        print("No repositories found.")
